generator client {
  provider     = "prisma-client-js"
  output       = "../src/mongo/generated"
  moduleFormat = "esm"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model YoutubeChannel {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  channelId  String @unique
  title      String
  url        String
  urlSlug    String @unique
  thumbnails Json

  publishedAt DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  videos YoutubeVideo[]

  @@map("youtube_channels")
}

model YoutubeVideo {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  videoId       String   @unique
  url           String   @unique
  title         String
  mainPoints    String[]
  summary       String
  relatedStocks Json?

  isProcessed     Boolean         @default(false)
  aiProcessStatus AiProcessStatus @default(PENDING)
  aiProcessError  String?

  isRelatedStock Boolean  @default(false)
  publishedAt    DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  appearances Appearances[]
  insights    Insight[]

  youtubeChannelId String         @db.ObjectId
  channel          YoutubeChannel @relation(fields: [youtubeChannelId], references: [id], onDelete: Cascade)

  script YoutubeVideoScript? @relation("VideoScript")
  json   YoutubeVideoJSON?   @relation("VideoJSON")

  @@map("youtube_videos")
}

model YoutubeVideoScript {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  text String

  youtubeVideoId String       @unique @db.ObjectId
  youtubeVideo   YoutubeVideo @relation("VideoScript", fields: [youtubeVideoId], references: [id], onDelete: Cascade)

  @@map("youtube_video_scripts")
}

model YoutubeVideoJSON {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  rawData Json

  youtubeVideoId String       @unique @db.ObjectId
  youtubeVideo   YoutubeVideo @relation("VideoJSON", fields: [youtubeVideoId], references: [id], onDelete: Cascade)

  @@map("youtube_video_json")
}

model Panel {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  expertise          String[]
  profileImageUrl    String?
  company            String?
  position           String
  accuracyScore      Float    @default(0) // 예측 정확도 점수
  totalPredictions   Int      @default(0) // 총 예측 횟수
  correctPredictions Int      @default(0) // 맞은 예측 횟수

  appearances Appearances[]
  insights    Insight[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("panels")
}

model Appearances {
  id      String       @id @default(auto()) @map("_id") @db.ObjectId
  panelId String       @db.ObjectId
  panel   Panel        @relation(fields: [panelId], references: [id], onDelete: Cascade)
  videoId String       @db.ObjectId
  video   YoutubeVideo @relation(fields: [videoId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([panelId, videoId])
  @@map("appearances")
}

model Insight {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId // MongoDB 고유 ID
  statement        String
  context          String? // 해당 주장이 나온 문맥 (스크립트 일부) (선택 사항)
  timestampInVideo String? // 비디오 내 발언 시점 (예: "01:23:45") (선택 사항)
  relatedStocks    Json? // 관련 주식 정보 (예: [{ listedExchange: "kospi", company: "삼성전자" }])

  panel   Panel  @relation(fields: [panelId], references: [id], onDelete: Cascade)
  panelId String @db.ObjectId

  video   YoutubeVideo @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId String       @db.ObjectId

  evaluations InsightEvaluation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("insights")
}

model InsightEvaluation {
  id           String           @id @default(auto()) @map("_id") @db.ObjectId
  score        Float            @default(0)
  note         String // 평가 내용 및 근거
  evidenceUrls String[] // 평가 근거 자료 URL (뉴스 기사, 논문 등)
  status       EvaluationStatus @default(PENDING) // 평가 상태 (열거형)

  insight   Insight @relation(fields: [insightId], references: [id], onDelete: Cascade)
  insightId String  @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("insights_evaluations")
}

enum AiProcessStatus {
  PENDING
  COMPLETED
  FAILED
}

enum EvaluationStatus {
  PENDING
  VERIFIED
  REFUTED
  ONGOING
}
